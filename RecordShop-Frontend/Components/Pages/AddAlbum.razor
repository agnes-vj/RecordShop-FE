@using RecordShop_Frontend.Services
@using RecordShop_Frontend.Model
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@page "/AddAlbum"

 <div class="container mt-4">
    <div class="card shadow-lg">
        <div class="card-header text-white" style="background: rgba(0, 0, 0, 0.5);">
            <h5 class="mb-0">🎵 Add New Album</h5>
        </div>
        <div class="card-body">
            <EditForm FormName="AddAlbum" Model="NewAlbum" OnValidSubmit="SaveAlbum">
                <DataAnnotationsValidator />
                <ValidationSummary />


                <div class="mb-3">
                    <label class="form-label">Album Title</label>
                    <InputText class="form-control" @bind-Value="NewAlbum.Title" placeholder="Enter album title" />
                    <ValidationMessage For="@(() => NewAlbum.Title)" />
                </div>


                <div class="mb-3 position-relative">
                    <label class="form-label">Artist</label>
                    <InputText class="form-control" @bind-Value="NewAlbum.ArtistName" placeholder="Search or enter artist name" @oninput="CheckArtistExists" />
                    <ValidationMessage For="@(() => NewAlbum.ArtistName)" />


                    @if (ArtistNotFound)
                    {
                        <div class="mt-2">
                            <span class="text-warning">⚠ Artist not found.</span>
                            <button class="btn btn-sm btn-success ms-2" @onclick="OpenArtistModal">+ Add Artist</button>
                        </div>
                    }
                </div>

                <!-- Genre -->
                <div class="mb-3">
                    <label class="form-label">Genre</label>
                    <InputText class="form-control" @bind-Value="NewAlbum.MusicGenre" placeholder="Enter music genre" />
                    <ValidationMessage For="@(() => NewAlbum.MusicGenre)" />
                </div>

                <!-- Release Year -->
                <div class="mb-3">
                    <label class="form-label">Release Year</label>
                    <InputNumber class="form-control" @bind-Value="NewAlbum.ReleaseYear" />
                    <ValidationMessage For="@(() => NewAlbum.ReleaseYear)" />
                </div>

                <!-- Stock -->
                <div class="mb-3">
                    <label class="form-label">Stock</label>
                    <InputNumber class="form-control" @bind-Value="NewAlbum.Stock" />
                    <ValidationMessage For="@(() => NewAlbum.Stock)" />
                </div>

                <!-- Submit & Cancel -->
                <div class="d-flex justify-content-between">
                    <button type="submit" class="btn btn-primary">💾 Save Album</button>
                    <button type="button" class="btn btn-secondary" @onclick="NavigateBack">🚪 Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>

    <!-- Status Message -->
    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="alert alert-info mt-3">@statusMessage</div>
    }

    <!-- Modal for Adding New Artist -->
    @if (ShowArtistModal)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title">🎤 Add New Artist</h5>
                        <button type="button" class="btn-close" @onclick="CloseArtistModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Artist Name</label>
                            <InputText class="form-control" @bind-Value="NewArtist.Name" placeholder="Enter artist name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="NewArtist.About" placeholder="Short artist bio" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-success" @onclick="SaveArtist">✅ Save Artist</button>
                        <button class="btn btn-secondary" @onclick="CloseArtistModal">❌ Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
 </div>
@code {
    private AlbumDTO NewAlbum = new();
    private Artist NewArtist = new();
    private bool ShowArtistModal = false;
    private bool ArtistNotFound = false;
    private List<string> SuggestedArtists = new();
    private string statusMessage = string.Empty;

    private async Task SaveAlbum()
    {
        try
        {
            var apiClient = new RecordShopApiClient();
            statusMessage = "Saving album...";
            var result = await apiClient.AddAlbum(NewAlbum);
            statusMessage = result.ErrorMessage;

            if (!result.HasError)
            {
                statusMessage = "Album added successfully! 🎉";
                NewAlbum = new AlbumDTO(); 
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error: {ex.Message}";
        }
    }

    private async Task CheckArtistExists(ChangeEventArgs e)
    {
        string input = e.Value?.ToString() ?? "";
        var apiClient = new RecordShopApiClient();

        if (string.IsNullOrWhiteSpace(input)) return;


        string normalizedInput = NormalizeString(input);
        var response = await apiClient.GetArtistByName(normalizedInput); 

        ArtistNotFound = (response.Item == null);
    }

    private string NormalizeString(string input)
    {
        return input.Trim().ToLowerInvariant().Replace(" ", "");
    }


    private void OpenArtistModal()
    {
        ShowArtistModal = true;
        NewArtist = new();
    }

    private async Task SaveArtist()
    {
        var apiClient = new RecordShopApiClient();
        Response<Artist> response = await apiClient.AddArtist(NewArtist);
        ShowArtistModal = false;
        if (response.HasError)
            statusMessage = response.ErrorMessage;
        statusMessage = "🎤 New artist added successfully!";
        NewAlbum.ArtistName = NewArtist.Name;
        ArtistNotFound = false;
    }

    private void CloseArtistModal()
    {
        ShowArtistModal = false;
    }

    private async Task NavigateBack()
    {
        var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to leave without saving?");
        if (isConfirmed)
        {
            NavigationManager.NavigateTo("/albums");
        }
    }
}