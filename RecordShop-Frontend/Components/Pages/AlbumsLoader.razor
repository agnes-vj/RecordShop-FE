@page "/albums"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.WebUtilities
@using RecordShop_Frontend.Model
@using RecordShop_Frontend.Services
@using RecordShop_Frontend.Components


@if (Albums == null)
{
    <div class="d-flex align-items-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-2">Loading albums...</span>
    </div>
}
else if ( albumsResult != null && albumsResult.HasError)
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @albumsResult.ErrorMessage
    </div>
}
else if (!showFeaturedAlbum)
{
    <AlbumSummaryList Albums="@Albums" AlbumsChanged="UpdateAlbumsList" />
}
else if (featuredAlbum != null)
{ 
    Console.WriteLine(featuredAlbum.Title);
    <AlbumSummary Album="@featuredAlbum" />
}

@code {

    [Parameter]
    public bool showFeaturedAlbum { get; set; } 
    private AlbumDTO featuredAlbum;
    private Response<List<AlbumDTO>> albumsResult = null;

    public List<AlbumDTO> Albums { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadAlbums();
        if ((Albums != null) && (showFeaturedAlbum))
        {
            int randomAlbumId = new Random().Next(1,Albums.Count);
            featuredAlbum = Albums.FirstOrDefault(album => album.Id == randomAlbumId);        
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        bool hasDeleteId = QueryHelpers.ParseQuery(uri.Query).TryGetValue("deletedId", out var deletedIdString);

        if (hasDeleteId)
        {
            int.TryParse(deletedIdString, out int deletedId);
            Albums.RemoveAll(a => a.Id == deletedId);
        }

        await LoadAlbums();
    }

    private async Task LoadAlbums()
    {
        try
        {
            var apiClient = new RecordShopApiClient();
            albumsResult = await apiClient.GetAlbums();
            Albums = albumsResult.Item ?? new();
        }
        catch (Exception ex)
        {
            albumsResult = new Response<List<AlbumDTO>>
                {
                    HasError = true,
                    ErrorMessage = $"Error loading albums: {ex.Message}"
                };
        }
    }

    private async Task UpdateAlbumsList(List<AlbumDTO> updatedAlbums)
    {
        Albums = updatedAlbums;
        StateHasChanged(); 
    }
    private async Task HandleAlbumDeleted(int albumId)
    {
        Albums.RemoveAll(a => a.Id == albumId); 
        StateHasChanged(); 
    }
}